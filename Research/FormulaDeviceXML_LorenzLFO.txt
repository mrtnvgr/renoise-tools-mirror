<?xml version="1.0" encoding="UTF-8"?>
<FilterDevicePreset doc_version="13">
  <DeviceSlot type="FormulaMetaDevice">
    <IsMaximized>true</IsMaximized>
    <FormulaParagraphs>
      <FormulaParagraph>go()</FormulaParagraph>
    </FormulaParagraphs>
    <FunctionsParagraphs>
      <FunctionsParagraph>-- for RENOISE Formula device martblek</FunctionsParagraph>
      <FunctionsParagraph>-- v0.01 </FunctionsParagraph>
      <FunctionsParagraph>LorenzLFO = {</FunctionsParagraph>
      <FunctionsParagraph>  mDX = 0.0,</FunctionsParagraph>
      <FunctionsParagraph>  mDY = 0.0,</FunctionsParagraph>
      <FunctionsParagraph>  mdZ = 0.0,</FunctionsParagraph>
      <FunctionsParagraph>  mDT = 0.0,</FunctionsParagraph>
      <FunctionsParagraph>  mFreq = 440.0,</FunctionsParagraph>
      <FunctionsParagraph>  mRate = 44100,</FunctionsParagraph>
      <FunctionsParagraph>  mX = 1.0,</FunctionsParagraph>
      <FunctionsParagraph>  mY = 1.0,</FunctionsParagraph>
      <FunctionsParagraph>  mZ = 1.0,</FunctionsParagraph>
      <FunctionsParagraph>  mA = 10.0,</FunctionsParagraph>
      <FunctionsParagraph>  mB = 28.0,</FunctionsParagraph>
      <FunctionsParagraph>  mC = 2.666,</FunctionsParagraph>
      <FunctionsParagraph>}</FunctionsParagraph>
      <FunctionsParagraph/>
      <FunctionsParagraph>function LorenzLFO:new(attrs)</FunctionsParagraph>
      <FunctionsParagraph>  attrs = attrs or {}</FunctionsParagraph>
      <FunctionsParagraph>  setmetatable(attrs, self)</FunctionsParagraph>
      <FunctionsParagraph>  self.__index = self</FunctionsParagraph>
      <FunctionsParagraph>  return attrs</FunctionsParagraph>
      <FunctionsParagraph>end</FunctionsParagraph>
      <FunctionsParagraph/>
      <FunctionsParagraph>function LorenzLFO:set_samplerate(rate)</FunctionsParagraph>
      <FunctionsParagraph>  self.mRate = rate</FunctionsParagraph>
      <FunctionsParagraph>  self.mDT = self.mFreq / rate</FunctionsParagraph>
      <FunctionsParagraph>end</FunctionsParagraph>
      <FunctionsParagraph/>
      <FunctionsParagraph>function LorenzLFO:set_freq(freq)</FunctionsParagraph>
      <FunctionsParagraph>  self.mFreq = freq</FunctionsParagraph>
      <FunctionsParagraph>  self.mDT = freq / self.mRate</FunctionsParagraph>
      <FunctionsParagraph>end</FunctionsParagraph>
      <FunctionsParagraph/>
      <FunctionsParagraph>function LorenzLFO:get_current()</FunctionsParagraph>
      <FunctionsParagraph>  return self.mX * 0.05107</FunctionsParagraph>
      <FunctionsParagraph>end</FunctionsParagraph>
      <FunctionsParagraph/>
      <FunctionsParagraph>function LorenzLFO:get_alternate()</FunctionsParagraph>
      <FunctionsParagraph>  return self.mY * 0.03679</FunctionsParagraph>
      <FunctionsParagraph>end</FunctionsParagraph>
      <FunctionsParagraph/>
      <FunctionsParagraph>function LorenzLFO:iterate()</FunctionsParagraph>
      <FunctionsParagraph>  self.mDX = self.mA * (self.mY - self.mX)</FunctionsParagraph>
      <FunctionsParagraph>  self.mDY = self.mX * (self.mB - self.mZ) - self.mY</FunctionsParagraph>
      <FunctionsParagraph>  self.mDZ = self.mX * self.mY - self.mC * self.mZ</FunctionsParagraph>
      <FunctionsParagraph>  self.mX = self.mX + self.mDX * self.mDT</FunctionsParagraph>
      <FunctionsParagraph>  self.mY = self.mY + self.mDY * self.mDT</FunctionsParagraph>
      <FunctionsParagraph>  self.mZ = self.mZ + self.mDZ * self.mDT</FunctionsParagraph>
      <FunctionsParagraph>  return self.mX * 0.05107</FunctionsParagraph>
      <FunctionsParagraph>end</FunctionsParagraph>
      <FunctionsParagraph/>
      <FunctionsParagraph>LFO = LorenzLFO:new(nil)</FunctionsParagraph>
      <FunctionsParagraph/>
      <FunctionsParagraph>function go()</FunctionsParagraph>
      <FunctionsParagraph>  LFO:set_samplerate(SRATE)</FunctionsParagraph>
      <FunctionsParagraph>  LFO:set_freq(A * 1024)</FunctionsParagraph>
      <FunctionsParagraph>  if PLAYING == 1 then</FunctionsParagraph>
      <FunctionsParagraph>    LFO:iterate()</FunctionsParagraph>
      <FunctionsParagraph>    local y = 0</FunctionsParagraph>
      <FunctionsParagraph>    if C &lt; 0.5 then</FunctionsParagraph>
      <FunctionsParagraph>      y = LFO:get_current() + 1</FunctionsParagraph>
      <FunctionsParagraph>    else</FunctionsParagraph>
      <FunctionsParagraph>      y = LFO:get_alternate() + 1</FunctionsParagraph>
      <FunctionsParagraph>    end</FunctionsParagraph>
      <FunctionsParagraph>    if y &gt; 1 then y = 1 end</FunctionsParagraph>
      <FunctionsParagraph>    return y * B</FunctionsParagraph>
      <FunctionsParagraph>  end</FunctionsParagraph>
      <FunctionsParagraph>  return 0</FunctionsParagraph>
      <FunctionsParagraph>end</FunctionsParagraph>
      <FunctionsParagraph/>
    </FunctionsParagraphs>
    <InputNameA>A</InputNameA>
    <InputNameB>B</InputNameB>
    <InputNameC>C</InputNameC>
    <EditorVisible>true</EditorVisible>
    <InputA>
      <Value>0.190082639</Value>
    </InputA>
    <InputB>
      <Value>0.619834721</Value>
    </InputB>
    <InputC>
      <Value>0.107438013</Value>
    </InputC>
  </DeviceSlot>
</FilterDevicePreset>